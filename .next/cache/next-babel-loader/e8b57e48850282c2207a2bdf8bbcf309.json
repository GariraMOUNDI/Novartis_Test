{"ast":null,"code":"const getTotalRecords = async (startDate, endDate) => {\n  try {\n    const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&limit=1`).catch(error => console.log(error));\n\n    if (res && \"json\" in res) {\n      const json = await res.json();\n      return json.meta.results.total;\n    }\n  } catch (error) {\n    console.log(\"An error occured while fetching data\");\n    return null;\n  }\n};\n\nconst getSexDivision = async (startDate, endDate) => {\n  try {\n    const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&count=patient.patientsex`).catch(error => console.log(error));\n\n    if (res && \"json\" in res) {\n      const json = await res.json();\n      return json.results.map(res => ({\n        term: convertSex(res.term),\n        count: res.count\n      }));\n    }\n  } catch (error) {\n    console.log(\"An error occured while fetching data\");\n    return null;\n  }\n};\n\nconst convertSex = sex => {\n  switch (sex) {\n    case 1:\n      return \"Male\";\n\n    case 2:\n      return \"Female\";\n\n    default:\n      return \"Unknown\";\n  }\n};\n\nconst getDrugIndication = async (startDate, endDate) => {\n  try {\n    const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&count=patient.drug.drugindication`).catch(error => console.log(error));\n\n    if (res && \"json\" in res) {\n      const json = await res.json();\n      return json.results;\n    }\n  } catch (error) {\n    console.log(\"An error occured while fetching data\");\n    return null;\n  }\n};\n\nexport const Data = (startDate, endDate) => ({\n  getTotalRecords: getTotalRecords(startDate, endDate),\n  getSexDivision: getSexDivision(startDate, endDate),\n  getDrugIndication: getDrugIndication(startDate, endDate)\n});","map":{"version":3,"sources":["D:/Novartis/with-typescript/src/pages/api/query/Data.ts"],"names":["getTotalRecords","startDate","endDate","res","fetch","catch","error","console","log","json","meta","results","total","getSexDivision","map","term","convertSex","count","sex","getDrugIndication","Data"],"mappings":"AACA,MAAMA,eAAe,GAAG,OAAOC,SAAP,EAA2BC,OAA3B,KAA+C;AACnE,MAAG;AACC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,2DAA0DH,SAAU,OAAMC,OAAQ,WAApF,CAAL,CACbG,KADa,CACPC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADF,CAAlB;;AAEA,QAAIH,GAAG,IAAI,UAAUA,GAArB,EAA0B;AACtB,YAAMM,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;AACA,aAAOA,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkBC,KAAzB;AACH;AACJ,GAPD,CAOC,OAAON,KAAP,EAAc;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,WAAO,IAAP;AACH;AACJ,CAZD;;AAgBA,MAAMK,cAAc,GAAG,OAAOZ,SAAP,EAA2BC,OAA3B,KAA+C;AAClE,MAAG;AACC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,2DAA0DH,SAAU,OAAMC,OAAQ,4BAApF,CAAL,CACbG,KADa,CACPC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADF,CAAlB;;AAEA,QAAIH,GAAG,IAAI,UAAUA,GAArB,EAA0B;AACtB,YAAMM,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;AACA,aAAOA,IAAI,CAACE,OAAL,CAAaG,GAAb,CAAkBX,GAAD,KAA2C;AAC/DY,QAAAA,IAAI,EAAGC,UAAU,CAACb,GAAG,CAACY,IAAL,CAD8C;AAE/DE,QAAAA,KAAK,EAAGd,GAAG,CAACc;AAFmD,OAA3C,CAAjB,CAAP;AAIH;AACJ,GAVD,CAUC,OAAOX,KAAP,EAAc;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,WAAO,IAAP;AACH;AACJ,CAfD;;AAiBA,MAAMQ,UAAU,GAAIE,GAAD,IAA2B;AAC1C,UAAQA,GAAR;AACI,SAAK,CAAL;AAAS,aAAO,MAAP;;AACT,SAAK,CAAL;AAAS,aAAO,QAAP;;AACT;AAAU,aAAO,SAAP;AAHd;AAKH,CAND;;AAOA,MAAMC,iBAAiB,GAAG,OAAOlB,SAAP,EAA2BC,OAA3B,KAA+C;AACrE,MAAG;AACC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,2DAA0DH,SAAU,OAAMC,OAAQ,qCAApF,CAAL,CACbG,KADa,CACPC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADF,CAAlB;;AAEA,QAAIH,GAAG,IAAI,UAAUA,GAArB,EAA0B;AACtB,YAAMM,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;AACA,aAAOA,IAAI,CAACE,OAAZ;AACH;AACJ,GAPD,CAOC,OAAOL,KAAP,EAAc;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,WAAO,IAAP;AACH;AACJ,CAZD;;AAcA,OAAO,MAAMY,IAAI,GAAG,CAACnB,SAAD,EAAqBC,OAArB,MAA2C;AAC3DF,EAAAA,eAAe,EAAGA,eAAe,CAACC,SAAD,EAAYC,OAAZ,CAD0B;AAE3DW,EAAAA,cAAc,EAAGA,cAAc,CAACZ,SAAD,EAAYC,OAAZ,CAF4B;AAG3DiB,EAAAA,iBAAiB,EAAGA,iBAAiB,CAAClB,SAAD,EAAYC,OAAZ;AAHsB,CAA3C,CAAb","sourcesContent":["\r\nconst getTotalRecords = async (startDate : string, endDate: string) => {\r\n    try{\r\n        const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&limit=1`)\r\n            .catch(error => console.log(error))\r\n        if (res && \"json\" in res) {\r\n            const json = await res.json()\r\n            return json.meta.results.total\r\n        }\r\n    }catch (error) {\r\n        console.log(\"An error occured while fetching data\")\r\n        return null\r\n    }\r\n}\r\n\r\n\r\n\r\nconst getSexDivision = async (startDate : string, endDate: string) => {\r\n    try{\r\n        const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&count=patient.patientsex`)\r\n            .catch(error => console.log(error))\r\n        if (res && \"json\" in res) {\r\n            const json = await res.json()\r\n            return json.results.map((res: { term: number; count: string }) => ({\r\n                term : convertSex(res.term),\r\n                count : res.count\r\n            }))\r\n        }\r\n    }catch (error) {\r\n        console.log(\"An error occured while fetching data\")\r\n        return null\r\n    }\r\n}\r\n\r\nconst convertSex = (sex : number) : string => {\r\n    switch (sex) {\r\n        case 1 : return \"Male\"\r\n        case 2 : return \"Female\"\r\n        default : return \"Unknown\"\r\n    }\r\n}\r\nconst getDrugIndication = async (startDate : string, endDate: string) => {\r\n    try{\r\n        const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&count=patient.drug.drugindication`)\r\n            .catch(error => console.log(error))\r\n        if (res && \"json\" in res) {\r\n            const json = await res.json()\r\n            return json.results\r\n        }\r\n    }catch (error) {\r\n        console.log(\"An error occured while fetching data\")\r\n        return null\r\n    }\r\n}\r\n\r\nexport const Data = (startDate : string, endDate : string) => ({\r\n    getTotalRecords : getTotalRecords(startDate, endDate),\r\n    getSexDivision : getSexDivision(startDate, endDate),\r\n    getDrugIndication : getDrugIndication(startDate, endDate)\r\n})"]},"metadata":{},"sourceType":"module"}