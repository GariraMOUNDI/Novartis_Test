{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Data } from \"./Data\";\nexport var StatisticsData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(startDate, endDate) {\n    var data, sex, drug, getPercentage;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = Data(startDate, endDate);\n            _context.next = 3;\n            return data.getSexDivision;\n\n          case 3:\n            sex = _context.sent;\n            _context.next = 6;\n            return data.getDrugIndication;\n\n          case 6:\n            drug = _context.sent;\n\n            getPercentage = function getPercentage(list) {\n              var totalForPercent = 0;\n              list === null || list === void 0 ? void 0 : list.forEach(function (res) {\n                totalForPercent += +res.count;\n              });\n              return list === null || list === void 0 ? void 0 : list.map(function (res) {\n                return {\n                  name: res.term,\n                  count: res.count,\n                  percentage: \"\".concat((+res.count / totalForPercent * 100).toFixed(2))\n                };\n              });\n            };\n\n            return _context.abrupt(\"return\", {\n              sexDivision: getPercentage(sex),\n              drugDivision: getPercentage(drug)\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function StatisticsData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}