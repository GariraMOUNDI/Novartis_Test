{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar getTotalRecords = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(startDate, endDate) {\n    var res, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"https://api.fda.gov/drug/event.json?search=receivedate:[\".concat(startDate, \"+TO+\").concat(endDate, \"]&limit=1\"))[\"catch\"](function (error) {\n              return console.log(error);\n            });\n\n          case 3:\n            res = _context.sent;\n\n            if (!(res && \"json\" in res)) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json.meta.results.total);\n\n          case 9:\n            _context.next = 15;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"An error occured while fetching data\");\n            return _context.abrupt(\"return\", null);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  }));\n\n  return function getTotalRecords(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getSexDivision = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(startDate, endDate) {\n    var res, json;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"https://api.fda.gov/drug/event.json?search=receivedate:[\".concat(startDate, \"+TO+\").concat(endDate, \"]&count=patient.patientsex\"))[\"catch\"](function (error) {\n              return console.log(error);\n            });\n\n          case 3:\n            res = _context2.sent;\n\n            if (!(res && \"json\" in res)) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json.results.map(function (res) {\n              return {\n                term: convertSex(res.term),\n                count: res.count\n              };\n            }));\n\n          case 9:\n            _context2.next = 15;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"An error occured while fetching data\");\n            return _context2.abrupt(\"return\", null);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 11]]);\n  }));\n\n  return function getSexDivision(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar convertSex = function convertSex(sex) {\n  switch (sex) {\n    case 1:\n      return \"Male\";\n\n    case 2:\n      return \"Female\";\n\n    default:\n      return \"Unknown\";\n  }\n};\n\nvar getDrugIndication = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(startDate, endDate) {\n    var res, json;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return fetch(\"https://api.fda.gov/drug/event.json?search=receivedate:[\".concat(startDate, \"+TO+\").concat(endDate, \"]&count=patient.drug.drugindication\"))[\"catch\"](function (error) {\n              return console.log(error);\n            });\n\n          case 3:\n            res = _context3.sent;\n\n            if (!(res && \"json\" in res)) {\n              _context3.next = 9;\n              break;\n            }\n\n            _context3.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context3.sent;\n            return _context3.abrupt(\"return\", json.results);\n\n          case 9:\n            _context3.next = 15;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(\"An error occured while fetching data\");\n            return _context3.abrupt(\"return\", null);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 11]]);\n  }));\n\n  return function getDrugIndication(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport var Data = function Data(startDate, endDate) {\n  return {\n    getTotalRecords: getTotalRecords(startDate, endDate),\n    getSexDivision: getSexDivision(startDate, endDate),\n    getDrugIndication: getDrugIndication(startDate, endDate)\n  };\n};\n_c = Data;\n\nvar _c;\n\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"sources":["D:/Novartis/with-typescript/src/pages/api/query/Data.ts"],"names":["getTotalRecords","startDate","endDate","fetch","error","console","log","res","json","meta","results","total","getSexDivision","map","term","convertSex","count","sex","getDrugIndication","Data"],"mappings":"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","sourcesContent":["\r\nconst getTotalRecords = async (startDate : string, endDate: string) => {\r\n    try{\r\n        const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&limit=1`)\r\n            .catch(error => console.log(error))\r\n        if (res && \"json\" in res) {\r\n            const json = await res.json()\r\n            return json.meta.results.total\r\n        }\r\n    }catch (error) {\r\n        console.log(\"An error occured while fetching data\")\r\n        return null\r\n    }\r\n}\r\n\r\n\r\n\r\nconst getSexDivision = async (startDate : string, endDate: string) => {\r\n    try{\r\n        const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&count=patient.patientsex`)\r\n            .catch(error => console.log(error))\r\n        if (res && \"json\" in res) {\r\n            const json = await res.json()\r\n            return json.results.map((res: { term: number; count: string }) => ({\r\n                term : convertSex(res.term),\r\n                count : res.count\r\n            }))\r\n        }\r\n    }catch (error) {\r\n        console.log(\"An error occured while fetching data\")\r\n        return null\r\n    }\r\n}\r\n\r\nconst convertSex = (sex : number) : string => {\r\n    switch (sex) {\r\n        case 1 : return \"Male\"\r\n        case 2 : return \"Female\"\r\n        default : return \"Unknown\"\r\n    }\r\n}\r\nconst getDrugIndication = async (startDate : string, endDate: string) => {\r\n    try{\r\n        const res = await fetch(`https://api.fda.gov/drug/event.json?search=receivedate:[${startDate}+TO+${endDate}]&count=patient.drug.drugindication`)\r\n            .catch(error => console.log(error))\r\n        if (res && \"json\" in res) {\r\n            const json = await res.json()\r\n            return json.results\r\n        }\r\n    }catch (error) {\r\n        console.log(\"An error occured while fetching data\")\r\n        return null\r\n    }\r\n}\r\n\r\nexport const Data = (startDate : string, endDate : string) => ({\r\n    getTotalRecords : getTotalRecords(startDate, endDate),\r\n    getSexDivision : getSexDivision(startDate, endDate),\r\n    getDrugIndication : getDrugIndication(startDate, endDate)\r\n})"]},"metadata":{},"sourceType":"module"}