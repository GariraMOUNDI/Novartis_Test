{"ast":null,"code":"import { Data } from \"./Data\";\nexport const ChartData = async (startYear, endYear) => {\n  const getData = async (startDate, endDate) => {\n    return await Data(startDate, endDate).getTotalRecords.then(res => res);\n  };\n\n  const getMonth = month => {\n    switch (month) {\n      case 1:\n        return \"January\";\n\n      case 2:\n        return \"February\";\n\n      case 3:\n        return \"March\";\n\n      case 4:\n        return \"April\";\n\n      case 5:\n        return \"May\";\n\n      case 6:\n        return \"June\";\n\n      case 7:\n        return \"July\";\n\n      case 8:\n        return \"August\";\n\n      case 9:\n        return \"September\";\n\n      case 10:\n        return \"October\";\n\n      case 11:\n        return \"November\";\n\n      case 12:\n        return \"December\";\n\n      default:\n        return \"N/A\";\n    }\n  };\n\n  if (+endYear - +startYear === 0) {\n    const result = [];\n\n    for (let i = 1; i <= 12; i++) {\n      if (i === 12) {\n        result.push({\n          term: getMonth(i),\n          count: (await getData(`${endYear}-${i}-01`, `${+endYear}-12-31`)) + \"\"\n        });\n      } else {\n        result.push({\n          term: getMonth(i),\n          count: (await getData(`${endYear}-${i}-01`, `${endYear}-${i + 1}-01`)) + \"\"\n        });\n      }\n    }\n\n    return result;\n  } else {\n    const result = [];\n\n    for (let i = +startYear; i <= +endYear; i++) {\n      result.push({\n        term: `${i}`,\n        count: (await getData(`${i}-01-01`, `${i}-12-31`)) + \"\"\n      });\n    }\n\n    return result;\n  }\n};","map":{"version":3,"sources":["D:/Novartis/with-typescript/src/pages/api/query/ChartData.ts"],"names":["Data","ChartData","startYear","endYear","getData","startDate","endDate","getTotalRecords","then","res","getMonth","month","result","i","push","term","count"],"mappings":"AACA,SAAQA,IAAR,QAAmB,QAAnB;AAGA,OAAO,MAAMC,SAAS,GAAG,OAAOC,SAAP,EAA0BC,OAA1B,KAAiE;AAEtF,QAAMC,OAAO,GAAG,OAAOC,SAAP,EAA0BC,OAA1B,KAA8C;AAC1D,WAAO,MAAMN,IAAI,CAACK,SAAD,EAAYC,OAAZ,CAAJ,CAAyBC,eAAzB,CAAyCC,IAAzC,CAA8CC,GAAG,IAAIA,GAArD,CAAb;AACH,GAFD;;AAIA,QAAMC,QAAQ,GAAIC,KAAD,IAA2B;AACxC,YAAQA,KAAR;AACI,WAAK,CAAL;AACI,eAAO,SAAP;;AACJ,WAAK,CAAL;AACI,eAAO,UAAP;;AACJ,WAAK,CAAL;AACI,eAAO,OAAP;;AACJ,WAAK,CAAL;AACI,eAAO,OAAP;;AACJ,WAAK,CAAL;AACI,eAAO,KAAP;;AACJ,WAAK,CAAL;AACI,eAAO,MAAP;;AACJ,WAAK,CAAL;AACI,eAAO,MAAP;;AACJ,WAAK,CAAL;AACI,eAAO,QAAP;;AACJ,WAAK,CAAL;AACI,eAAO,WAAP;;AACJ,WAAK,EAAL;AACI,eAAO,SAAP;;AACJ,WAAK,EAAL;AACI,eAAO,UAAP;;AACJ,WAAK,EAAL;AACI,eAAO,UAAP;;AACJ;AACI,eAAO,KAAP;AA1BR;AA4BH,GA7BD;;AA+BA,MAAI,CAACR,OAAD,GAAW,CAACD,SAAZ,KAA0B,CAA9B,EAAiC;AAC7B,UAAMU,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,UAAIA,CAAC,KAAK,EAAV,EAAc;AACVD,QAAAA,MAAM,CAACE,IAAP,CAAY;AACRC,UAAAA,IAAI,EAAEL,QAAQ,CAACG,CAAD,CADN;AAERG,UAAAA,KAAK,EAAE,OAAMZ,OAAO,CAAE,GAAED,OAAQ,IAAGU,CAAE,KAAjB,EAAwB,GAAE,CAACV,OAAQ,QAAnC,CAAb,IAA2D;AAF1D,SAAZ;AAIH,OALD,MAKO;AACHS,QAAAA,MAAM,CAACE,IAAP,CAAY;AACRC,UAAAA,IAAI,EAAEL,QAAQ,CAACG,CAAD,CADN;AAERG,UAAAA,KAAK,EAAE,OAAMZ,OAAO,CAAE,GAAED,OAAQ,IAAGU,CAAE,KAAjB,EAAwB,GAAEV,OAAQ,IAAGU,CAAC,GAAG,CAAE,KAA3C,CAAb,IAAgE;AAF/D,SAAZ;AAIH;AACJ;;AACD,WAAOD,MAAP;AACH,GAhBD,MAgBO;AACH,UAAMA,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAACX,SAAd,EAAyBW,CAAC,IAAI,CAACV,OAA/B,EAAwCU,CAAC,EAAzC,EAA6C;AACzCD,MAAAA,MAAM,CAACE,IAAP,CAAY;AACRC,QAAAA,IAAI,EAAG,GAAEF,CAAE,EADH;AAERG,QAAAA,KAAK,EAAE,OAAMZ,OAAO,CAAE,GAAES,CAAE,QAAN,EAAgB,GAAEA,CAAE,QAApB,CAAb,IAA4C;AAF3C,OAAZ;AAIH;;AACD,WAAOD,MAAP;AACH;AACJ,CA/DM","sourcesContent":["\r\nimport {Data} from \"./Data\";\r\nimport {Result} from \"../domain/domain\";\r\n\r\nexport const ChartData = async (startYear: string, endYear: string): Promise<Result[]> => {\r\n\r\n    const getData = async (startDate: string, endDate: string) => {\r\n        return await Data(startDate, endDate).getTotalRecords.then(res => res)\r\n    }\r\n\r\n    const getMonth = (month: number): string => {\r\n        switch (month) {\r\n            case 1:\r\n                return \"January\"\r\n            case 2:\r\n                return \"February\"\r\n            case 3:\r\n                return \"March\"\r\n            case 4:\r\n                return \"April\"\r\n            case 5:\r\n                return \"May\"\r\n            case 6:\r\n                return \"June\"\r\n            case 7:\r\n                return \"July\"\r\n            case 8:\r\n                return \"August\"\r\n            case 9:\r\n                return \"September\"\r\n            case 10:\r\n                return \"October\"\r\n            case 11:\r\n                return \"November\"\r\n            case 12:\r\n                return \"December\"\r\n            default :\r\n                return \"N/A\"\r\n        }\r\n    }\r\n\r\n    if (+endYear - +startYear === 0) {\r\n        const result = []\r\n        for (let i = 1; i <= 12; i++) {\r\n            if (i === 12) {\r\n                result.push({\r\n                    term: getMonth(i),\r\n                    count: await getData(`${endYear}-${i}-01`, `${+endYear}-12-31`) + \"\"\r\n                })\r\n            } else {\r\n                result.push({\r\n                    term: getMonth(i),\r\n                    count: await getData(`${endYear}-${i}-01`, `${endYear}-${i + 1}-01`) + \"\"\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    } else {\r\n        const result = []\r\n        for (let i = +startYear; i <= +endYear; i++) {\r\n            result.push({\r\n                term: `${i}`,\r\n                count: await getData(`${i}-01-01`, `${i}-12-31`) + \"\"\r\n            })\r\n        }\r\n        return result\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}