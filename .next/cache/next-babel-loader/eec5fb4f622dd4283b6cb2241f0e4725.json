{"ast":null,"code":"import { Data } from \"./Data\";\nexport const StatisticsData = async (startDate, endDate) => {\n  const data = Data(startDate, endDate);\n  const sex = await data.getSexDivision;\n  const drug = await data.getDrugIndication;\n\n  const getPercentage = list => {\n    let totalForPercent = 0;\n    list === null || list === void 0 ? void 0 : list.forEach(res => {\n      totalForPercent += +res.count;\n    });\n    return list === null || list === void 0 ? void 0 : list.map(res => ({\n      name: res.term,\n      count: res.count,\n      percentage: `${(+res.count / totalForPercent * 100).toFixed(2)}`\n    }));\n  };\n\n  return {\n    sexDivision: getPercentage(sex),\n    drugDivision: getPercentage(drug)\n  };\n};","map":{"version":3,"sources":["D:/Novartis/with-typescript/src/pages/api/query/StatisticsData.ts"],"names":["Data","StatisticsData","startDate","endDate","data","sex","getSexDivision","drug","getDrugIndication","getPercentage","list","totalForPercent","forEach","res","count","map","name","term","percentage","toFixed","sexDivision","drugDivision"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,QAAnB;AAGA,OAAO,MAAMC,cAAc,GAAG,OAAOC,SAAP,EAA0BC,OAA1B,KAAmE;AAC7F,QAAMC,IAAI,GAAGJ,IAAI,CAACE,SAAD,EAAYC,OAAZ,CAAjB;AACA,QAAME,GAAG,GAAG,MAAMD,IAAI,CAACE,cAAvB;AACA,QAAMC,IAAI,GAAG,MAAMH,IAAI,CAACI,iBAAxB;;AAEA,QAAMC,aAAa,GAAIC,IAAD,IAA8B;AAChD,QAAIC,eAAe,GAAG,CAAtB;AACAD,IAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEE,OAAN,CAAeC,GAAG,IAAI;AAClBF,MAAAA,eAAe,IAAI,CAACE,GAAG,CAACC,KAAxB;AACH,KAFD;AAIA,WAAOJ,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEK,GAAN,CAAUF,GAAG,KAAK;AACrBG,MAAAA,IAAI,EAAEH,GAAG,CAACI,IADW;AAErBH,MAAAA,KAAK,EAAGD,GAAG,CAACC,KAFS;AAGrBI,MAAAA,UAAU,EAAG,GAAE,CAAE,CAACL,GAAG,CAACC,KAAL,GAAaH,eAAd,GAAiC,GAAlC,EAAuCQ,OAAvC,CAA+C,CAA/C,CAAkD;AAH5C,KAAL,CAAb,CAAP;AAKH,GAXD;;AAaA,SAAO;AACHC,IAAAA,WAAW,EAAGX,aAAa,CAACJ,GAAD,CADxB;AAEHgB,IAAAA,YAAY,EAAGZ,aAAa,CAACF,IAAD;AAFzB,GAAP;AAIH,CAtBM","sourcesContent":["import {Data} from \"./Data\";\r\nimport {Domain, Result, Statistic} from \"../domain/domain\";\r\n\r\nexport const StatisticsData = async (startDate: string, endDate: string) : Promise<Statistic> => {\r\n    const data = Data(startDate, endDate)\r\n    const sex = await data.getSexDivision\r\n    const drug = await data.getDrugIndication\r\n\r\n    const getPercentage = (list: Result[]): Domain[] => {\r\n        let totalForPercent = 0\r\n        list?.forEach( res => {\r\n            totalForPercent += +res.count\r\n        })\r\n\r\n        return list?.map(res => ({\r\n            name: res.term,\r\n            count : res.count,\r\n            percentage: `${((+res.count / totalForPercent) * 100).toFixed(2)}`\r\n        }))\r\n    }\r\n\r\n    return {\r\n        sexDivision : getPercentage(sex),\r\n        drugDivision : getPercentage(drug)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}