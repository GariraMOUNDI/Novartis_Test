{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Data } from \"./Data\";\nexport var StatisticsData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(startDate, endDate) {\n    var data, sex, drug, getPercentage;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = Data(startDate, endDate);\n            _context.next = 3;\n            return data.getSexDivision;\n\n          case 3:\n            sex = _context.sent;\n            _context.next = 6;\n            return data.getDrugIndication;\n\n          case 6:\n            drug = _context.sent;\n\n            getPercentage = function getPercentage(list) {\n              var totalForPercent = 0;\n              list === null || list === void 0 ? void 0 : list.forEach(function (res) {\n                totalForPercent += +res.count;\n              });\n              return list === null || list === void 0 ? void 0 : list.map(function (res) {\n                return {\n                  name: res.term,\n                  count: res.count,\n                  percentage: \"\".concat((+res.count / totalForPercent * 100).toFixed(2))\n                };\n              });\n            };\n\n            return _context.abrupt(\"return\", {\n              sexDivision: getPercentage(sex),\n              drugDivision: getPercentage(drug)\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function StatisticsData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n_c = StatisticsData;\n\nvar _c;\n\n$RefreshReg$(_c, \"StatisticsData\");","map":{"version":3,"sources":["D:/Novartis/with-typescript/src/pages/api/query/StatisticsData.ts"],"names":["Data","StatisticsData","startDate","endDate","data","getSexDivision","sex","getDrugIndication","drug","getPercentage","list","totalForPercent","forEach","res","count","map","name","term","percentage","toFixed","sexDivision","drugDivision"],"mappings":";;AAAA,SAAQA,IAAR,QAAmB,QAAnB;AAGA,OAAO,IAAMC,cAAc;AAAA,sEAAG,iBAAOC,SAAP,EAA0BC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,YAAAA,IADoB,GACbJ,IAAI,CAACE,SAAD,EAAYC,OAAZ,CADS;AAAA;AAAA,mBAERC,IAAI,CAACC,cAFG;;AAAA;AAEpBC,YAAAA,GAFoB;AAAA;AAAA,mBAGPF,IAAI,CAACG,iBAHE;;AAAA;AAGpBC,YAAAA,IAHoB;;AAKpBC,YAAAA,aALoB,GAKJ,SAAhBA,aAAgB,CAACC,IAAD,EAA8B;AAChD,kBAAIC,eAAe,GAAG,CAAtB;AACAD,cAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEE,OAAN,CAAe,UAAAC,GAAG,EAAI;AAClBF,gBAAAA,eAAe,IAAI,CAACE,GAAG,CAACC,KAAxB;AACH,eAFD;AAIA,qBAAOJ,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEK,GAAN,CAAU,UAAAF,GAAG;AAAA,uBAAK;AACrBG,kBAAAA,IAAI,EAAEH,GAAG,CAACI,IADW;AAErBH,kBAAAA,KAAK,EAAGD,GAAG,CAACC,KAFS;AAGrBI,kBAAAA,UAAU,YAAK,CAAE,CAACL,GAAG,CAACC,KAAL,GAAaH,eAAd,GAAiC,GAAlC,EAAuCQ,OAAvC,CAA+C,CAA/C,CAAL;AAHW,iBAAL;AAAA,eAAb,CAAP;AAKH,aAhByB;;AAAA,6CAkBnB;AACHC,cAAAA,WAAW,EAAGX,aAAa,CAACH,GAAD,CADxB;AAEHe,cAAAA,YAAY,EAAGZ,aAAa,CAACD,IAAD;AAFzB,aAlBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdP,cAAc;AAAA;AAAA;AAAA,GAApB;KAAMA,c","sourcesContent":["import {Data} from \"./Data\";\r\nimport {Domain, Result, Statistic} from \"../domain/domain\";\r\n\r\nexport const StatisticsData = async (startDate: string, endDate: string) : Promise<Statistic> => {\r\n    const data = Data(startDate, endDate)\r\n    const sex = await data.getSexDivision\r\n    const drug = await data.getDrugIndication\r\n\r\n    const getPercentage = (list: Result[]): Domain[] => {\r\n        let totalForPercent = 0\r\n        list?.forEach( res => {\r\n            totalForPercent += +res.count\r\n        })\r\n\r\n        return list?.map(res => ({\r\n            name: res.term,\r\n            count : res.count,\r\n            percentage: `${((+res.count / totalForPercent) * 100).toFixed(2)}`\r\n        }))\r\n    }\r\n\r\n    return {\r\n        sexDivision : getPercentage(sex),\r\n        drugDivision : getPercentage(drug)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}