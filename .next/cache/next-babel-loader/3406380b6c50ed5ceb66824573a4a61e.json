{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Data } from \"./Data\";\nexport var ChartData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(startYear, endYear) {\n    var getData, getMonth, result, i, _result, _i;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            getData = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(startDate, endDate) {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return Data(startDate, endDate).getTotalRecords.then(function (res) {\n                          return res;\n                        });\n\n                      case 2:\n                        return _context.abrupt(\"return\", _context.sent);\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function getData(_x3, _x4) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            getMonth = function getMonth(month) {\n              switch (month) {\n                case 1:\n                  return \"January\";\n\n                case 2:\n                  return \"February\";\n\n                case 3:\n                  return \"March\";\n\n                case 4:\n                  return \"April\";\n\n                case 5:\n                  return \"May\";\n\n                case 6:\n                  return \"June\";\n\n                case 7:\n                  return \"July\";\n\n                case 8:\n                  return \"August\";\n\n                case 9:\n                  return \"September\";\n\n                case 10:\n                  return \"October\";\n\n                case 11:\n                  return \"November\";\n\n                case 12:\n                  return \"December\";\n\n                default:\n                  return \"N/A\";\n              }\n            };\n\n            if (!(+endYear - +startYear === 0)) {\n              _context2.next = 31;\n              break;\n            }\n\n            result = [];\n            i = 1;\n\n          case 5:\n            if (!(i <= 12)) {\n              _context2.next = 28;\n              break;\n            }\n\n            if (!(i === 12)) {\n              _context2.next = 17;\n              break;\n            }\n\n            _context2.t0 = result;\n            _context2.t1 = getMonth(i);\n            _context2.next = 11;\n            return getData(\"\".concat(endYear, \"-\").concat(i, \"-01\"), \"\".concat(+endYear, \"-12-31\"));\n\n          case 11:\n            _context2.t2 = _context2.sent;\n            _context2.t3 = _context2.t2 + \"\";\n            _context2.t4 = {\n              term: _context2.t1,\n              count: _context2.t3\n            };\n\n            _context2.t0.push.call(_context2.t0, _context2.t4);\n\n            _context2.next = 25;\n            break;\n\n          case 17:\n            _context2.t5 = result;\n            _context2.t6 = getMonth(i);\n            _context2.next = 21;\n            return getData(\"\".concat(endYear, \"-\").concat(i, \"-01\"), \"\".concat(endYear, \"-\").concat(i + 1, \"-01\"));\n\n          case 21:\n            _context2.t7 = _context2.sent;\n            _context2.t8 = _context2.t7 + \"\";\n            _context2.t9 = {\n              term: _context2.t6,\n              count: _context2.t8\n            };\n\n            _context2.t5.push.call(_context2.t5, _context2.t9);\n\n          case 25:\n            i++;\n            _context2.next = 5;\n            break;\n\n          case 28:\n            return _context2.abrupt(\"return\", result);\n\n          case 31:\n            _result = [];\n            _i = +startYear;\n\n          case 33:\n            if (!(_i <= +endYear)) {\n              _context2.next = 45;\n              break;\n            }\n\n            _context2.t10 = _result;\n            _context2.t11 = \"\".concat(_i);\n            _context2.next = 38;\n            return getData(\"\".concat(_i, \"-01-01\"), \"\".concat(_i, \"-12-31\"));\n\n          case 38:\n            _context2.t12 = _context2.sent;\n            _context2.t13 = _context2.t12 + \"\";\n            _context2.t14 = {\n              term: _context2.t11,\n              count: _context2.t13\n            };\n\n            _context2.t10.push.call(_context2.t10, _context2.t14);\n\n          case 42:\n            _i++;\n            _context2.next = 33;\n            break;\n\n          case 45:\n            return _context2.abrupt(\"return\", _result);\n\n          case 46:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function ChartData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n_c = ChartData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartData\");","map":{"version":3,"sources":["D:/Novartis/with-typescript/src/pages/api/query/ChartData.ts"],"names":["Data","ChartData","startYear","endYear","getData","startDate","endDate","getTotalRecords","then","res","getMonth","month","result","i","term","count","push"],"mappings":"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","sourcesContent":["\r\nimport {Data} from \"./Data\";\r\nimport {Result} from \"../domain/domain\";\r\n\r\nexport const ChartData = async (startYear: string, endYear: string): Promise<Result[]> => {\r\n\r\n    const getData = async (startDate: string, endDate: string) => {\r\n        return await Data(startDate, endDate).getTotalRecords.then(res => res)\r\n    }\r\n\r\n    const getMonth = (month: number): string => {\r\n        switch (month) {\r\n            case 1:\r\n                return \"January\"\r\n            case 2:\r\n                return \"February\"\r\n            case 3:\r\n                return \"March\"\r\n            case 4:\r\n                return \"April\"\r\n            case 5:\r\n                return \"May\"\r\n            case 6:\r\n                return \"June\"\r\n            case 7:\r\n                return \"July\"\r\n            case 8:\r\n                return \"August\"\r\n            case 9:\r\n                return \"September\"\r\n            case 10:\r\n                return \"October\"\r\n            case 11:\r\n                return \"November\"\r\n            case 12:\r\n                return \"December\"\r\n            default :\r\n                return \"N/A\"\r\n        }\r\n    }\r\n\r\n    if (+endYear - +startYear === 0) {\r\n        const result = []\r\n        for (let i = 1; i <= 12; i++) {\r\n            if (i === 12) {\r\n                result.push({\r\n                    term: getMonth(i),\r\n                    count: await getData(`${endYear}-${i}-01`, `${+endYear}-12-31`) + \"\"\r\n                })\r\n            } else {\r\n                result.push({\r\n                    term: getMonth(i),\r\n                    count: await getData(`${endYear}-${i}-01`, `${endYear}-${i + 1}-01`) + \"\"\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    } else {\r\n        const result = []\r\n        for (let i = +startYear; i <= +endYear; i++) {\r\n            result.push({\r\n                term: `${i}`,\r\n                count: await getData(`${i}-01-01`, `${i}-12-31`) + \"\"\r\n            })\r\n        }\r\n        return result\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}